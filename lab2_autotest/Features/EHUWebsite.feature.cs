// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace lab2_autotest.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EHU Website Functionality")]
    public partial class EHUWebsiteFunctionalityFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "EHUWebsite.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "EHU Website Functionality", "  As a user of the EHU website\r\n  I want to be able to navigate the site, search " +
                    "for content, and access contact information\r\n  So that I can find information ab" +
                    "out the university", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Navigate to About page")]
        public async System.Threading.Tasks.Task NavigateToAboutPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Navigate to About page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await testRunner.GivenAsync("I am on the EHU main page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
  await testRunner.WhenAsync("I click on the About link", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
  await testRunner.ThenAsync("I should be redirected to the About page", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
  await testRunner.AndAsync("the page header should display \"About\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for content on the website")]
        [NUnit.Framework.TestCaseAttribute("study programs", "https://en.ehu.lt/?s=study+programs", null)]
        [NUnit.Framework.TestCaseAttribute("faculty", "https://en.ehu.lt/?s=faculty", null)]
        public async System.Threading.Tasks.Task SearchForContentOnTheWebsite(string query, string expectedUrl, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("query", query);
            argumentsOfScenario.Add("expectedUrl", expectedUrl);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Search for content on the website", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
  await testRunner.GivenAsync("I am on the EHU main page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
  await testRunner.WhenAsync(string.Format("I search for \"{0}\"", query), ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
  await testRunner.ThenAsync(string.Format("I should be redirected to the search results page with URL \"{0}\"", expectedUrl), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Switch language to Lithuanian")]
        public async System.Threading.Tasks.Task SwitchLanguageToLithuanian()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Switch language to Lithuanian", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
  await testRunner.GivenAsync("I am on the EHU main page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
  await testRunner.WhenAsync("I switch the language to Lithuanian", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
  await testRunner.ThenAsync("I should be redirected to the Lithuanian version of the website", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify contact information")]
        public async System.Threading.Tasks.Task VerifyContactInformation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify contact information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
  await testRunner.GivenAsync("I am on the EHU contact page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
  await testRunner.ThenAsync("the email information should be \"E-mail: franciskscarynacr@gmail.com\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
  await testRunner.AndAsync("the Lithuanian phone number should be \"Phone (LT): +370 68 771365\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
  await testRunner.AndAsync("the Belarusian phone number should be \"Phone (BY): +375 29 5781488\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
  await testRunner.AndAsync("the social media text should include Facebook, Telegram and VK", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
