"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify successful book deletion and post-deletion retrieval failure","418","DeleteBook_ShouldReturn204AndMakeBookUnavailable","","Sat May 24 23:05:01 EEST 2025","passed","Sat May 24 23:05:01 EEST 2025","Delete Book","Books API Tests","BooksTests","DeleteBook_ShouldReturn204AndMakeBookUnavailable"
"Verify duplicate book creation handling","354","CreateBook_ShouldReturnConflict_OnDuplicate","","Sat May 24 23:04:58 EEST 2025","passed","Sat May 24 23:04:58 EEST 2025","Create Book","Books API Tests","BooksTests","CreateBook_ShouldReturnConflict_OnDuplicate"
"Verify fetching a valid book by ID returns correct data","344","GetBookById_ShouldReturnCorrectBook_WhenIdIsValid","","Sat May 24 23:04:59 EEST 2025","passed","Sat May 24 23:04:59 EEST 2025","Get Book by ID","Books API Tests","BooksTests","GetBookById_ShouldReturnCorrectBook_WhenIdIsValid"
"Verify 404 when deleting non-existent book","499","DeleteBook_ShouldReturn404_WhenIdDoesNotExist","","Sat May 24 23:05:01 EEST 2025","passed","Sat May 24 23:05:02 EEST 2025","Delete Book","Books API Tests","BooksTests","DeleteBook_ShouldReturn404_WhenIdDoesNotExist"
"Verify 400 when deleting with invalid book ID","310","DeleteBook_ShouldReturn400_WhenIdIsInvalid","","Sat May 24 23:05:02 EEST 2025","passed","Sat May 24 23:05:02 EEST 2025","Delete Book","Books API Tests","BooksTests","DeleteBook_ShouldReturn400_WhenIdIsInvalid"
"Verify 400 for invalid book ID format","334","GetBookById_ShouldReturn400_WhenIdIsInvalid","","Sat May 24 23:04:59 EEST 2025","passed","Sat May 24 23:05:00 EEST 2025","Get Book by ID","Books API Tests","BooksTests","GetBookById_ShouldReturn400_WhenIdIsInvalid"
"Verify that a valid book is successfully created","1017","CreateBook_ShouldReturn201AndCorrectData","","Sat May 24 23:04:57 EEST 2025","passed","Sat May 24 23:04:58 EEST 2025","Create Book","Books API Tests","BooksTests","CreateBook_ShouldReturn201AndCorrectData"
"Verify 400 for invalid book ID during update","419","UpdateBook_ShouldReturn400_WhenIdIsInvalid","","Sat May 24 23:05:01 EEST 2025","passed","Sat May 24 23:05:01 EEST 2025","Update Book","Books API Tests","BooksTests","UpdateBook_ShouldReturn400_WhenIdIsInvalid"
"Verify successful book update and data changes","388","UpdateBook_ShouldReturn204AndReflectChanges","","Sat May 24 23:05:00 EEST 2025","passed","Sat May 24 23:05:00 EEST 2025","Update Book","Books API Tests","BooksTests","UpdateBook_ShouldReturn204AndReflectChanges"
"Verify 404 when updating non-existent book","618","UpdateBook_ShouldReturn404_WhenIdDoesNotExist","","Sat May 24 23:05:00 EEST 2025","passed","Sat May 24 23:05:01 EEST 2025","Update Book","Books API Tests","BooksTests","UpdateBook_ShouldReturn404_WhenIdDoesNotExist"
"Verify the API returns a list of all books with required fields","343","GetAllBooks_ShouldReturnListWithValidBooks","","Sat May 24 23:04:58 EEST 2025","passed","Sat May 24 23:04:59 EEST 2025","Get All Books","Books API Tests","BooksTests","GetAllBooks_ShouldReturnListWithValidBooks"
"Verify 404 for non-existent book ID","306","GetBookById_ShouldReturn404_WhenIdDoesNotExist","","Sat May 24 23:04:59 EEST 2025","passed","Sat May 24 23:04:59 EEST 2025","Get Book by ID","Books API Tests","BooksTests","GetBookById_ShouldReturn404_WhenIdDoesNotExist"
